{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>An open source client for Paystack in GO</p> <p>Documentation: https://gray-adeyi.github.io/paystack/</p> <p>Source Code: https://github.com/gray-adeyi/paystack</p>"},{"location":"#tldr-motivation","title":"TL;DR Motivation","text":"<p>The <code>github.com/gray-adeyi/paystack</code> package was created to provide a modern, developer-friendly Go client for Paystack. Existing solutions like <code>rpip/paystack-go</code> are outdated and fragmented across multiple forks due to minor serialization issues. This package solves that by using Go generics and reflection to offer flexible, customizable response models. It provides sensible defaults while allowing developers to override them when needed\u2014reducing boilerplate and avoiding the need for forks.</p> <p>Get Started</p>"},{"location":"#motivation","title":"Motivation","text":"<p><code>github.com/gray-adeyi/paystack</code> is an open-source Go client designed to make integrating Paystack into your Go applications both intuitive and developer-friendly. It brings a fresh perspective on what a modern, reliable Go SDK for Paystack should look like\u2014prioritizing ease of use, maintainability, and flexibility.</p> <p>While surveying the Go ecosystem for existing Paystack clients, I found <code>github.com/rpip/paystack-go</code> to be the most prominent and widely used package. It served the community well for years. However, its lack of recent updates has led to numerous forks, each attempting to fix unresolved issues, primarily related to incorrect or outdated data serialization.</p> <p>As a result, the Go package index is now cluttered with multiple forks of the same project, each containing different fixes. For developers, this creates a frustrating experience\u2014choosing a package that \"just works\" becomes a guessing game.</p> <p> Click on image to zoom in</p> <p>Upon reviewing open issues and forks of <code>rpip/paystack-go</code>, I noticed that most problems were minor: misspelled or missing fields in the response models. This inspired the idea of shifting control of data serialization to the package consumers themselves. The thinking was: if developers can define their own types, they won\u2019t have to rely on upstream fixes for small bugs.</p> <p>In my first iteration, every API method returned a <code>Response</code> with its <code>Data</code> field as a raw <code>[]byte</code>, leaving the consumer responsible for unmarshaling into their own types. While this approach resolved the serialization issues of the original package by putting control in the user\u2019s hands, it introduced a new problem\u2014too much responsibility was pushed to the developer. Consumers had to define and manage their own types across projects, which became cumbersome and repetitive.</p> <p>This led to a rethink: could serialization be made flexible enough to provide sensible defaults, while still allowing consumers to override them if needed? For example, when a Paystack API response changes or includes a new field, consumers should be able to adapt without waiting for an upstream fix or forking the library.</p> <p>This idea forms the foundation of the current version. By leveraging Go\u2019s generics and reflection, this package now offers a set of built-in models and a generic response wrapper: <code>Response[T]</code>, where <code>T</code> is the target type for the response data. Each client method is documented with the default model it uses, and consumers can still provide their own if needed.</p> <p>This strikes a balance between developer convenience and flexibility, ensuring that you can get started quickly with the defaults while still having full control when necessary. Learn how to get started here.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This project is an Open Source client library for Paystack. It is not officially endorsed or affiliated with Paystack. All trademarks and company names belong to their respective owners.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"#contributions","title":"Contributions","text":"<p>Thank you for being interested in contributing to <code>github.com/gray-adeyi/paystack</code>. There are many ways you can contribute to the project:</p> <ul> <li>Star on GitHub</li> <li>Try <code>github.com/gray-adeyi/paystack</code> and   report bugs/issues you find</li> <li>Buy me a coffee</li> </ul>"},{"location":"#other-related-projects","title":"Other Related Projects","text":"Name Language Functionality Paystack CLI Python A command line app for interacting with paystack APIs pypaystack2 Python A client library for integrating paystack in python paystack Go (This project) A client library for integration paystack in go @gray-adeyi/paystack-sdk Typescript/Javascript A client library for integrating paystack in Javascript runtimes (Node,Deno,Bun) paystack Dart A client library for integration paystack in Dart"},{"location":"api-reference/","title":"API Reference","text":"<p>See API Reference</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#creating-a-customer-on-you-integration","title":"Creating a customer on you integration","text":"<pre><code>package main\nimport (\n        \"context\"\n        \"fmt\"\n\n        p \"github.com/gray-adeyi/paystack\"\n        \"github.com/gray-adeyi/paystack/models\"\n    )\n\n    func main() {\n        client := p.NewClient(p.WithSecretKey(\"&lt;paystack-secret-key&gt;\"))\n\n        var response models.Response[models.Customer]\n        if err := client.Customers.Create(\n            context.TODO(),\n            \"johndoe@example.com\",\n            \"John\",\n            \"Doe\", \n            &amp;response,\n        ); err != nil {\n            panic(err)\n        }\n\n        fmt.Println(response)\n\n        // With optional parameters\n        err := client.Customers.Create(\n            context.TODO(),\n            \"johndoe@example.com\",\n            \"John\",\n            \"Doe\", \n            &amp;response, \n            p.WithOptionalPayload(\"phone\",\"+2348123456789\"),\n        )\n    }\n</code></pre> <p>Examples are provided in the docs of the client methods</p>"},{"location":"faqs/","title":"FAQs","text":"<p>Create an issue with your question.</p>"},{"location":"get-started/","title":"Get Started","text":""},{"location":"get-started/#installation","title":"Installation","text":"<pre><code>go get -u github.com/gray-adeyi/paystack\n</code></pre>"},{"location":"get-started/#usage","title":"Usage","text":"<p>To use <code>github.com/gray-adeyi/paystack</code> in your Go project, start by initializing a client and calling any of the available API methods. Here's a basic example that retrieves all transactions associated with your integration:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    p \"github.com/gray-adeyi/paystack\"\n    \"github.com/gray-adeyi/paystack/models\"\n)\n\nfunc main() {\n    // Initialize a Paystack client with your secret key\n    client := p.NewClient(p.WithSecretKey(\"&lt;your-secret-key&gt;\"))\n\n    // Prepare a response model to hold the returned transactions\n    var response models.Response[[]models.Transaction]\n\n    // Retrieve all transactions\n    if err := client.Transactions.All(\n        context.Background(), \n        &amp;response,\n         p.WithQuery(\"perPage\", \"1\"),\n    ); err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Println(response.Status)\n    fmt.Println(response.Message)\n    fmt.Println(response.Data)\n}\n</code></pre>"},{"location":"get-started/#breakdown","title":"Breakdown","text":""},{"location":"get-started/#importing-the-package","title":"Importing the package","text":"<pre><code>import (\n    p \"github.com/gray-adeyi/paystack\"\n    \"github.com/gray-adeyi/paystack/models\"\n)\n</code></pre> <ul> <li>The package is aliased as <code>p</code> to make function calls cleaner   <code>p.NewClient(...)</code> instead of <code>paystack.NewClient(...)</code>.</li> <li>The <code>models</code> package contains all default response types used to deserialize   API responses.</li> </ul> <p>You may also need to import the enum package in some cases:</p> <pre><code>import \"github.com/gray-adeyi/paystack/enum\"\n</code></pre> <p>This is especially useful when a method requires enum values as arguments. For example, if a method accepts a <code>currency enum.Currency</code> argument, you can call it like:</p> <pre><code>ClientMethod(enum.CurrencyNgn)\n</code></pre>"},{"location":"get-started/#initializing-the-client","title":"Initializing the Client","text":"<pre><code>client := p.NewClient(p.WithSecretKey(\"&lt;your-secret-key&gt;\"))\n</code></pre> <p>This initializes a new <code>PaystackClient</code> which provides access to all Paystack services through structured method groupings. Each field on the <code>PaystackClient</code> maps to a specific service, reflecting the structure of Paystack\u2019s official REST API.</p> <p>For example:</p> <ul> <li><code>client.Transactions.All</code> \u2192   List Transactions</li> <li><code>client.Transctions.Initialize</code> \u2192   Initialize Transaction</li> </ul>"},{"location":"get-started/#client-bindings","title":"Client bindings","text":"<p>The <code>PaystackClient</code> exposes several grouped services, each corresponding to a major section of the Paystack API. These include:</p> Field name on <code>PaystackClient</code> Client binding Functionality Example of methods available <code>Transactions</code> <code>TransactionClient</code> Provides all the methods for interacting with all the transactions related endpoints <code>client.Transactions.All</code>, <code>client.Transactions.Initialize</code>, e.t.c <code>TransactionSplits</code> <code>TransactionSplitClient</code> Provides all the methods for interacting with all the transaction splits related endpoints <code>client.TransactionSplits.Create</code>,<code>client.TransactionSplits.All</code>, e.t.c. <code>Terminals</code> <code>TerminalClient</code> Provides all the methods for interacting with all the terminal related endpoints <code>client.Terminals.SendEvent</code>, <code>client.Terminals.EventStatus</code>, e.t.c. <code>Customers</code> <code>CustomerClient</code> Provides all the methods for interacting with all the customers related endpoints <code>client.Customers.Create</code>, <code>client.Customers.All</code>, e.t.c. <code>DedicatedVirtualAccounts</code> <code>DedicatedVirtualAccountClient</code> Provides all the methods for interacting with all the dedicated virtual accounts related endpoints <code>client.DedicatedVirtualAccounts.Create</code>,<code>client.DedicatedVirtualAccounts.Assign</code> <code>ApplePay</code> <code>ApplePayClient</code> Provides all the methods for interacting with all the apple pay related endpoints <code>client.ApplePay.Register</code>, <code>client.ApplePay.All</code>, e.t.c. <code>SubAccounts</code> <code>SubAccountClient</code> Provides all the methods for interacting with all the sub accounts related endpoints <code>client.SubAccounts.Create</code>, <code>client.SubAccounts.All</code>, e.t.c. <code>Plans</code> <code>PlanClient</code> Provides all the methods for interacting with all the plans related endpoints <code>client.Plans.Create</code>, <code>client.Plans.All</code>, e.t.c <code>Subscriptions</code> <code>SubscriptionClient</code> Provides all the methods for interacting with all the subscriptions related endpoints <code>client.Subscriptions.Create</code>, <code>client.Subscriptions.All</code>, e.t.c. <code>Products</code> <code>ProductClient</code> Provides all the methods for interacting with all the products related endpoints <code>client.Products.Create</code>, <code>client.Products.All</code>, e.t.c. <code>PaymentPages</code> <code>PaymentPageClient</code> Provides all the methods for interacting with all the payment pages related endpoints <code>client.PaymentPages.Create</code>, <code>client.PaymentPages.All</code>, e.t.c. <code>PaymentRequests</code> <code>PaymentRequestClient</code> Provides all the methods for interacting with all the payment requests related endpoints <code>client.PaymentRequests.Create</code>, <code>client.PaymentRequests.All</code>, e.t.c. <code>Settlements</code> <code>SettlementClient</code> Provides all the methods for interacting with all the settlements related endpoints <code>client.Settlements.All</code>, <code>client.Settlements.AllTransactions</code> <code>TransferRecipients</code> <code>TransferRecipientClient</code> Provides all the methods for interacting with all the transfer recipients related endpoints <code>client.TransferRecipients.Create</code>, <code>client.TransferRecipients.BulkCreate</code>, e.t.c. <code>Transfers</code> <code>TransferClient</code> Provides all the methods for interacting with all the transfers related endpoints <code>client.Transfers.Initiate</code>, <code>client.Transfers.Finalize</code>, e.t.c. <code>TransferControl</code> <code>TranferControlClient</code> Provides all the methods for interacting with all the transfer control related endpoints <code>client.TransferControl.Balance</code>, <code>client.TransferControl.BalanceLedger</code>, e.t.c. <code>BulkCharges</code> <code>BulkChargeClient</code> Provides all the methods for interacting with all the bulk charge related endpoints <code>client.BulkCharges.Initiate</code>, <code>client.BulkCharges.All</code>, e.t.c. <code>Integration</code> <code>IntegrationClient</code> Provides all the methods for interacting with all the integration related endpoints <code>client.Integration.Timeout</code>,<code>client.Integration.UpdateTimeout</code> <code>Charges</code> <code>ChargeClient</code> Provides all the methods for interacting with all the charge related endpoints <code>client.Charges.Create</code>, <code>client.Charges.SubmitPin</code>, e.t.c <code>Disputes</code> <code>DisputeClient</code> Provides all the methods for interacting with all the disputes related endpoints <code>client.Disputes.All</code>, <code>client.Disputes.FetchOne</code>, e.t.c. <code>Refunds</code> <code>RefundClient</code> Provides all the methods for interacting with all the refunds related endpoints <code>client.Refunds.Create</code>, <code>client.Refunds.All</code>, e.t.c. <code>Verification</code> <code>VerificationClient</code> Provides all the methods for interacting with all the verification related endpoints <code>client.Verification.ValidateAccount</code>, <code>client.Verification.ResolveBin</code> <code>Miscellaneous</code> <code>MiscellaneousClient</code> Provides all the methods for interacting with all the miscellaneous related endpoints <code>client.Miscellaneous.Banks</code>,<code>client.Miscellaneous.Countries</code>,e.t.c. <p>Each of these provides a 1:1 mapping to the relevant sections in the Paystack API refernce, making it intuitive to find and use the features you need.</p>"},{"location":"get-started/#response-handling","title":"Response Handling","text":"<pre><code>var response models.Response[[]models.Transaction]\n</code></pre> <p>Next, we define the response variable that will hold the result of the <code>client.Transactions.All</code> call.</p> <p>If you're used to APIs where the response is returned directly from the method like this:</p> <pre><code>response, err := client.Transactions.All()\n</code></pre> <p>...this might feel a little counterintuitive at first.</p> <p>However, this design choice brings a major advantage: you can use your own custom types for deserialization. This is especially helpful when dealing with unexpected serialization issues, such as missing or misspelled fields in the API response.</p>"},{"location":"get-started/#choosing-the-right-response-type","title":"Choosing the right Response Type","text":"<p>You might now be wondering: how do I know what response model to use by default?</p> <p>To answer that, let\u2019s look at the full method call again:</p> <pre><code>var response models.Response[[]models.Transaction]\n\nif err := client.Transactions.All(context.Background(), &amp;response); err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p>All client methods that accept a response parameter are documented with the default model they expect. If you're using an IDE or code editor with hover support, you can hover over the method (e.g., <code>All</code>) to view the expected default type.</p> <p> Click on image to zoom in</p> <p>This allows you to either use the package\u2019s built-in models (like <code>models.Transaction</code>) or define your own if needed\u2014giving you both convenience and flexibility.</p>"},{"location":"get-started/#custom-response-types","title":"Custom Response Types","text":"<p>When you hover over a client method like All, you\u2019ll see a line like this in the documentation:</p> <p>Default response: <code>models.Response[[]models.Transaction]</code></p> <p>This means the package uses <code>[]models.Transaction</code> as the default type for deserializing the data returned from that method call.</p> <p>This design also gives you the flexibility to override the default model and use your own custom type when necessary\u2014especially in cases where:</p> <ul> <li>A field is missing or misspelled in the default model</li> <li>You need additional fields not provided in the built-in type</li> </ul>"},{"location":"get-started/#understanding-modelsresponset","title":"Understanding <code>models.Response[T]</code>","text":"<p>The <code>models.Response[T]</code> type is a generic struct that wraps around the data returned by the Paystack API. Here\u2019s what it looks like:</p> <pre><code>// Response is a struct containing the status code and data retrieved from Paystack.\ntype Response[T any] struct {\n    StatusCode int         // HTTP status code returned from Paystack\n    Status     bool        `json:\"status\"`\n    Message    string      `json:\"message\"`\n    Data       T           `json:\"data\"`      // The actual data payload\n    Meta       *Meta       `json:\"meta\"`\n    Type       *string     `json:\"type\"`\n    Code       *string     `json:\"code\"`\n    Raw        []byte      // Raw response body\n}\n</code></pre> <p>You can technically use your own response wrapper, but in most cases this is unnecessary. The key advantage lies in customizing the <code>T</code> in <code>Response[T]</code>.</p>"},{"location":"get-started/#why-and-when-to-use-a-custom-type","title":"Why and When to Use a Custom Type","text":"<p>Let\u2019s say the default response type is:</p> <pre><code>models.Response[models.Transaction]\n</code></pre> <p>And <code>models.Transaction</code> in this package looks like this:</p> <pre><code>type Transaction struct {   \n    Id        int    `json:\"id\"`\n    Reference string `json:\"refernce\"` // &lt;- typo!\n}\n</code></pre> <p>You notice that the <code>Reference</code> field isn\u2019t being populated because of a misspelled tag (<code>\"refernce\"</code> instead of <code>\"reference\"</code>), and the model is also missing an <code>Amount</code> field that\u2019s returned by the API.</p> <p>To fix this, you can define your own model:</p> <pre><code>type CustomTransaction struct { \n    Id        int    `json:\"id\"`\n    Reference string `json:\"reference\"`\n    Amount    int    `json:\"amount\"`\n}\n</code></pre> <p>Then use it like so:</p> <pre><code>var response models.Response[CustomTransaction]\n\nif err := client.Transactions.All(context.TODO(), &amp;response); err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p>That\u2019s the added flexibility! You don\u2019t have to wait for upstream fixes for simple marshaling issues\u2014you can resolve them instantly by defining your own type.</p> <p>\ud83d\udca1 If you do encounter issues like this, please consider reporting them here so they can be fixed for others as well.</p>"},{"location":"get-started/#client-methods-with-optional-parameters","title":"Client Methods with Optional Parameters","text":"<p>Some client methods in this package accept variadic arguments defined as either:</p> <ul> <li><code>queries ...Query</code> \u2014 for modifying URL query parameters</li> <li><code>optionalPayloads ...OptionalPayload</code> \u2014 for adding optional fields to the   request body that are not required method parameters</li> </ul> <p>To support these, the package provides two helper functions:</p> <ul> <li><code>paystack.WithQuery(key string, value string)</code></li> <li><code>paystack.WithOptionalPayload(key string, value any)</code></li> </ul>"},{"location":"get-started/#example-using-withquery","title":"Example: Using <code>WithQuery</code>","text":"<p>The method <code>client.Transactions.All</code> accepts variadic <code>Query</code> parameters. You can pass them like this:</p> <pre><code>if err := client.Transactions.All(\n    context.TODO(),\n    &amp;response,\n    p.WithQuery(\"perPage\", \"50\"),\n    p.WithQuery(\"page\", \"2\"),\n); err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p>This example sets:</p> <ul> <li><code>perPage=50</code>: limits results to 50 transactions per request</li> <li><code>page=2</code>: retrieves the second page of results</li> </ul> <p>The keys (e.g., <code>\"perPage\"</code>, <code>\"page\"</code>) are based on the Paystack API reference, and the values must be strings.</p>"},{"location":"get-started/#example-using-withoptionalpayload","title":"Example: Using <code>WithOptionalPayload</code>","text":"<p>For request bodies that support optional fields, the <code>WithOptionalPayload</code> function works similarly, but accepts values of any type:</p> <pre><code>if err := client.Plans.Create(\n    context.TODO(),\n    \"Monthly retainer\", \n    500000, \n    enum.IntervalMonthly, \n    &amp;response, \n    p.WithOptionalPayload(\"description\",\"a test description\"),\n); err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p>Here, the <code>description</code> field is optional and not part of the required method arguments, so it's passed using <code>WithOptionalPayload</code>.</p>"},{"location":"get-started/#conclusion","title":"Conclusion","text":"<p>If you find this package helpful, consider giving it a \u2b50\ufe0f on GitHub. It helps make the project more visible to other developers who might benefit from it.</p> <p>Want to show extra support? You can buy me a coffee \u2615 \u2014 your support helps keep the project alive and improving!</p> <p>Also, be sure to check out the examples section for more use cases.</p>"}]}